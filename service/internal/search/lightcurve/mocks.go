// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package lightcurve

import (
	"github.com/dirodriguezm/xmatch/service/internal/search/conesearch"
	mock "github.com/stretchr/testify/mock"
)

// NewMockExternalClient creates a new instance of MockExternalClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExternalClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExternalClient {
	mock := &MockExternalClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockExternalClient is an autogenerated mock type for the ExternalClient type
type MockExternalClient struct {
	mock.Mock
}

type MockExternalClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExternalClient) EXPECT() *MockExternalClient_Expecter {
	return &MockExternalClient_Expecter{mock: &_m.Mock}
}

// FetchLightcurve provides a mock function for the type MockExternalClient
func (_mock *MockExternalClient) FetchLightcurve(f float64, f1 float64, f2 float64, n int) ClientResult {
	ret := _mock.Called(f, f1, f2, n)

	if len(ret) == 0 {
		panic("no return value specified for FetchLightcurve")
	}

	var r0 ClientResult
	if returnFunc, ok := ret.Get(0).(func(float64, float64, float64, int) ClientResult); ok {
		r0 = returnFunc(f, f1, f2, n)
	} else {
		r0 = ret.Get(0).(ClientResult)
	}
	return r0
}

// MockExternalClient_FetchLightcurve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchLightcurve'
type MockExternalClient_FetchLightcurve_Call struct {
	*mock.Call
}

// FetchLightcurve is a helper method to define mock.On call
//   - f float64
//   - f1 float64
//   - f2 float64
//   - n int
func (_e *MockExternalClient_Expecter) FetchLightcurve(f interface{}, f1 interface{}, f2 interface{}, n interface{}) *MockExternalClient_FetchLightcurve_Call {
	return &MockExternalClient_FetchLightcurve_Call{Call: _e.mock.On("FetchLightcurve", f, f1, f2, n)}
}

func (_c *MockExternalClient_FetchLightcurve_Call) Run(run func(f float64, f1 float64, f2 float64, n int)) *MockExternalClient_FetchLightcurve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 float64
		if args[0] != nil {
			arg0 = args[0].(float64)
		}
		var arg1 float64
		if args[1] != nil {
			arg1 = args[1].(float64)
		}
		var arg2 float64
		if args[2] != nil {
			arg2 = args[2].(float64)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockExternalClient_FetchLightcurve_Call) Return(clientResult ClientResult) *MockExternalClient_FetchLightcurve_Call {
	_c.Call.Return(clientResult)
	return _c
}

func (_c *MockExternalClient_FetchLightcurve_Call) RunAndReturn(run func(f float64, f1 float64, f2 float64, n int) ClientResult) *MockExternalClient_FetchLightcurve_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConesearchService creates a new instance of MockConesearchService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConesearchService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConesearchService {
	mock := &MockConesearchService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConesearchService is an autogenerated mock type for the ConesearchService type
type MockConesearchService struct {
	mock.Mock
}

type MockConesearchService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConesearchService) EXPECT() *MockConesearchService_Expecter {
	return &MockConesearchService_Expecter{mock: &_m.Mock}
}

// FindMetadataByConesearch provides a mock function for the type MockConesearchService
func (_mock *MockConesearchService) FindMetadataByConesearch(f float64, f1 float64, f2 float64, n int, s string) ([]conesearch.MetadataResult, error) {
	ret := _mock.Called(f, f1, f2, n, s)

	if len(ret) == 0 {
		panic("no return value specified for FindMetadataByConesearch")
	}

	var r0 []conesearch.MetadataResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(float64, float64, float64, int, string) ([]conesearch.MetadataResult, error)); ok {
		return returnFunc(f, f1, f2, n, s)
	}
	if returnFunc, ok := ret.Get(0).(func(float64, float64, float64, int, string) []conesearch.MetadataResult); ok {
		r0 = returnFunc(f, f1, f2, n, s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]conesearch.MetadataResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(float64, float64, float64, int, string) error); ok {
		r1 = returnFunc(f, f1, f2, n, s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConesearchService_FindMetadataByConesearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindMetadataByConesearch'
type MockConesearchService_FindMetadataByConesearch_Call struct {
	*mock.Call
}

// FindMetadataByConesearch is a helper method to define mock.On call
//   - f float64
//   - f1 float64
//   - f2 float64
//   - n int
//   - s string
func (_e *MockConesearchService_Expecter) FindMetadataByConesearch(f interface{}, f1 interface{}, f2 interface{}, n interface{}, s interface{}) *MockConesearchService_FindMetadataByConesearch_Call {
	return &MockConesearchService_FindMetadataByConesearch_Call{Call: _e.mock.On("FindMetadataByConesearch", f, f1, f2, n, s)}
}

func (_c *MockConesearchService_FindMetadataByConesearch_Call) Run(run func(f float64, f1 float64, f2 float64, n int, s string)) *MockConesearchService_FindMetadataByConesearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 float64
		if args[0] != nil {
			arg0 = args[0].(float64)
		}
		var arg1 float64
		if args[1] != nil {
			arg1 = args[1].(float64)
		}
		var arg2 float64
		if args[2] != nil {
			arg2 = args[2].(float64)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockConesearchService_FindMetadataByConesearch_Call) Return(metadataResults []conesearch.MetadataResult, err error) *MockConesearchService_FindMetadataByConesearch_Call {
	_c.Call.Return(metadataResults, err)
	return _c
}

func (_c *MockConesearchService_FindMetadataByConesearch_Call) RunAndReturn(run func(f float64, f1 float64, f2 float64, n int, s string) ([]conesearch.MetadataResult, error)) *MockConesearchService_FindMetadataByConesearch_Call {
	_c.Call.Return(run)
	return _c
}
