// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package conesearch

import (
	"context"
	"database/sql"

	"github.com/dirodriguezm/xmatch/service/internal/repository"
	mock "github.com/stretchr/testify/mock"
)

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// BulkGetAllwise provides a mock function for the type MockRepository
func (_mock *MockRepository) BulkGetAllwise(context1 context.Context, strings []string) ([]repository.Allwise, error) {
	ret := _mock.Called(context1, strings)

	if len(ret) == 0 {
		panic("no return value specified for BulkGetAllwise")
	}

	var r0 []repository.Allwise
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string) ([]repository.Allwise, error)); ok {
		return returnFunc(context1, strings)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string) []repository.Allwise); ok {
		r0 = returnFunc(context1, strings)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.Allwise)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = returnFunc(context1, strings)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_BulkGetAllwise_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkGetAllwise'
type MockRepository_BulkGetAllwise_Call struct {
	*mock.Call
}

// BulkGetAllwise is a helper method to define mock.On call
//   - context1 context.Context
//   - strings []string
func (_e *MockRepository_Expecter) BulkGetAllwise(context1 interface{}, strings interface{}) *MockRepository_BulkGetAllwise_Call {
	return &MockRepository_BulkGetAllwise_Call{Call: _e.mock.On("BulkGetAllwise", context1, strings)}
}

func (_c *MockRepository_BulkGetAllwise_Call) Run(run func(context1 context.Context, strings []string)) *MockRepository_BulkGetAllwise_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_BulkGetAllwise_Call) Return(allwises []repository.Allwise, err error) *MockRepository_BulkGetAllwise_Call {
	_c.Call.Return(allwises, err)
	return _c
}

func (_c *MockRepository_BulkGetAllwise_Call) RunAndReturn(run func(context1 context.Context, strings []string) ([]repository.Allwise, error)) *MockRepository_BulkGetAllwise_Call {
	_c.Call.Return(run)
	return _c
}

// BulkInsertAllwise provides a mock function for the type MockRepository
func (_mock *MockRepository) BulkInsertAllwise(context1 context.Context, dB *sql.DB, metadatas []repository.Metadata) error {
	ret := _mock.Called(context1, dB, metadatas)

	if len(ret) == 0 {
		panic("no return value specified for BulkInsertAllwise")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sql.DB, []repository.Metadata) error); ok {
		r0 = returnFunc(context1, dB, metadatas)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_BulkInsertAllwise_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkInsertAllwise'
type MockRepository_BulkInsertAllwise_Call struct {
	*mock.Call
}

// BulkInsertAllwise is a helper method to define mock.On call
//   - context1 context.Context
//   - dB *sql.DB
//   - metadatas []repository.Metadata
func (_e *MockRepository_Expecter) BulkInsertAllwise(context1 interface{}, dB interface{}, metadatas interface{}) *MockRepository_BulkInsertAllwise_Call {
	return &MockRepository_BulkInsertAllwise_Call{Call: _e.mock.On("BulkInsertAllwise", context1, dB, metadatas)}
}

func (_c *MockRepository_BulkInsertAllwise_Call) Run(run func(context1 context.Context, dB *sql.DB, metadatas []repository.Metadata)) *MockRepository_BulkInsertAllwise_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *sql.DB
		if args[1] != nil {
			arg1 = args[1].(*sql.DB)
		}
		var arg2 []repository.Metadata
		if args[2] != nil {
			arg2 = args[2].([]repository.Metadata)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRepository_BulkInsertAllwise_Call) Return(err error) *MockRepository_BulkInsertAllwise_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_BulkInsertAllwise_Call) RunAndReturn(run func(context1 context.Context, dB *sql.DB, metadatas []repository.Metadata) error) *MockRepository_BulkInsertAllwise_Call {
	_c.Call.Return(run)
	return _c
}

// BulkInsertObject provides a mock function for the type MockRepository
func (_mock *MockRepository) BulkInsertObject(context1 context.Context, dB *sql.DB, insertObjectParamss []repository.InsertObjectParams) error {
	ret := _mock.Called(context1, dB, insertObjectParamss)

	if len(ret) == 0 {
		panic("no return value specified for BulkInsertObject")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sql.DB, []repository.InsertObjectParams) error); ok {
		r0 = returnFunc(context1, dB, insertObjectParamss)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_BulkInsertObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkInsertObject'
type MockRepository_BulkInsertObject_Call struct {
	*mock.Call
}

// BulkInsertObject is a helper method to define mock.On call
//   - context1 context.Context
//   - dB *sql.DB
//   - insertObjectParamss []repository.InsertObjectParams
func (_e *MockRepository_Expecter) BulkInsertObject(context1 interface{}, dB interface{}, insertObjectParamss interface{}) *MockRepository_BulkInsertObject_Call {
	return &MockRepository_BulkInsertObject_Call{Call: _e.mock.On("BulkInsertObject", context1, dB, insertObjectParamss)}
}

func (_c *MockRepository_BulkInsertObject_Call) Run(run func(context1 context.Context, dB *sql.DB, insertObjectParamss []repository.InsertObjectParams)) *MockRepository_BulkInsertObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *sql.DB
		if args[1] != nil {
			arg1 = args[1].(*sql.DB)
		}
		var arg2 []repository.InsertObjectParams
		if args[2] != nil {
			arg2 = args[2].([]repository.InsertObjectParams)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRepository_BulkInsertObject_Call) Return(err error) *MockRepository_BulkInsertObject_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_BulkInsertObject_Call) RunAndReturn(run func(context1 context.Context, dB *sql.DB, insertObjectParamss []repository.InsertObjectParams) error) *MockRepository_BulkInsertObject_Call {
	_c.Call.Return(run)
	return _c
}

// FindObjects provides a mock function for the type MockRepository
func (_mock *MockRepository) FindObjects(context1 context.Context, int64s []int64) ([]repository.Mastercat, error) {
	ret := _mock.Called(context1, int64s)

	if len(ret) == 0 {
		panic("no return value specified for FindObjects")
	}

	var r0 []repository.Mastercat
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []int64) ([]repository.Mastercat, error)); ok {
		return returnFunc(context1, int64s)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []int64) []repository.Mastercat); ok {
		r0 = returnFunc(context1, int64s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.Mastercat)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []int64) error); ok {
		r1 = returnFunc(context1, int64s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_FindObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindObjects'
type MockRepository_FindObjects_Call struct {
	*mock.Call
}

// FindObjects is a helper method to define mock.On call
//   - context1 context.Context
//   - int64s []int64
func (_e *MockRepository_Expecter) FindObjects(context1 interface{}, int64s interface{}) *MockRepository_FindObjects_Call {
	return &MockRepository_FindObjects_Call{Call: _e.mock.On("FindObjects", context1, int64s)}
}

func (_c *MockRepository_FindObjects_Call) Run(run func(context1 context.Context, int64s []int64)) *MockRepository_FindObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []int64
		if args[1] != nil {
			arg1 = args[1].([]int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_FindObjects_Call) Return(mastercats []repository.Mastercat, err error) *MockRepository_FindObjects_Call {
	_c.Call.Return(mastercats, err)
	return _c
}

func (_c *MockRepository_FindObjects_Call) RunAndReturn(run func(context1 context.Context, int64s []int64) ([]repository.Mastercat, error)) *MockRepository_FindObjects_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllObjects provides a mock function for the type MockRepository
func (_mock *MockRepository) GetAllObjects(context1 context.Context) ([]repository.Mastercat, error) {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for GetAllObjects")
	}

	var r0 []repository.Mastercat
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]repository.Mastercat, error)); ok {
		return returnFunc(context1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []repository.Mastercat); ok {
		r0 = returnFunc(context1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.Mastercat)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(context1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetAllObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllObjects'
type MockRepository_GetAllObjects_Call struct {
	*mock.Call
}

// GetAllObjects is a helper method to define mock.On call
//   - context1 context.Context
func (_e *MockRepository_Expecter) GetAllObjects(context1 interface{}) *MockRepository_GetAllObjects_Call {
	return &MockRepository_GetAllObjects_Call{Call: _e.mock.On("GetAllObjects", context1)}
}

func (_c *MockRepository_GetAllObjects_Call) Run(run func(context1 context.Context)) *MockRepository_GetAllObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepository_GetAllObjects_Call) Return(mastercats []repository.Mastercat, err error) *MockRepository_GetAllObjects_Call {
	_c.Call.Return(mastercats, err)
	return _c
}

func (_c *MockRepository_GetAllObjects_Call) RunAndReturn(run func(context1 context.Context) ([]repository.Mastercat, error)) *MockRepository_GetAllObjects_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllwise provides a mock function for the type MockRepository
func (_mock *MockRepository) GetAllwise(context1 context.Context, s string) (repository.Allwise, error) {
	ret := _mock.Called(context1, s)

	if len(ret) == 0 {
		panic("no return value specified for GetAllwise")
	}

	var r0 repository.Allwise
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (repository.Allwise, error)); ok {
		return returnFunc(context1, s)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) repository.Allwise); ok {
		r0 = returnFunc(context1, s)
	} else {
		r0 = ret.Get(0).(repository.Allwise)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(context1, s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetAllwise_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllwise'
type MockRepository_GetAllwise_Call struct {
	*mock.Call
}

// GetAllwise is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
func (_e *MockRepository_Expecter) GetAllwise(context1 interface{}, s interface{}) *MockRepository_GetAllwise_Call {
	return &MockRepository_GetAllwise_Call{Call: _e.mock.On("GetAllwise", context1, s)}
}

func (_c *MockRepository_GetAllwise_Call) Run(run func(context1 context.Context, s string)) *MockRepository_GetAllwise_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_GetAllwise_Call) Return(allwise repository.Allwise, err error) *MockRepository_GetAllwise_Call {
	_c.Call.Return(allwise, err)
	return _c
}

func (_c *MockRepository_GetAllwise_Call) RunAndReturn(run func(context1 context.Context, s string) (repository.Allwise, error)) *MockRepository_GetAllwise_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllwiseFromPixels provides a mock function for the type MockRepository
func (_mock *MockRepository) GetAllwiseFromPixels(context1 context.Context, int64s []int64) ([]repository.GetAllwiseFromPixelsRow, error) {
	ret := _mock.Called(context1, int64s)

	if len(ret) == 0 {
		panic("no return value specified for GetAllwiseFromPixels")
	}

	var r0 []repository.GetAllwiseFromPixelsRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []int64) ([]repository.GetAllwiseFromPixelsRow, error)); ok {
		return returnFunc(context1, int64s)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []int64) []repository.GetAllwiseFromPixelsRow); ok {
		r0 = returnFunc(context1, int64s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.GetAllwiseFromPixelsRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []int64) error); ok {
		r1 = returnFunc(context1, int64s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetAllwiseFromPixels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllwiseFromPixels'
type MockRepository_GetAllwiseFromPixels_Call struct {
	*mock.Call
}

// GetAllwiseFromPixels is a helper method to define mock.On call
//   - context1 context.Context
//   - int64s []int64
func (_e *MockRepository_Expecter) GetAllwiseFromPixels(context1 interface{}, int64s interface{}) *MockRepository_GetAllwiseFromPixels_Call {
	return &MockRepository_GetAllwiseFromPixels_Call{Call: _e.mock.On("GetAllwiseFromPixels", context1, int64s)}
}

func (_c *MockRepository_GetAllwiseFromPixels_Call) Run(run func(context1 context.Context, int64s []int64)) *MockRepository_GetAllwiseFromPixels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []int64
		if args[1] != nil {
			arg1 = args[1].([]int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_GetAllwiseFromPixels_Call) Return(getAllwiseFromPixelsRows []repository.GetAllwiseFromPixelsRow, err error) *MockRepository_GetAllwiseFromPixels_Call {
	_c.Call.Return(getAllwiseFromPixelsRows, err)
	return _c
}

func (_c *MockRepository_GetAllwiseFromPixels_Call) RunAndReturn(run func(context1 context.Context, int64s []int64) ([]repository.GetAllwiseFromPixelsRow, error)) *MockRepository_GetAllwiseFromPixels_Call {
	_c.Call.Return(run)
	return _c
}

// GetCatalogs provides a mock function for the type MockRepository
func (_mock *MockRepository) GetCatalogs(context1 context.Context) ([]repository.Catalog, error) {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for GetCatalogs")
	}

	var r0 []repository.Catalog
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]repository.Catalog, error)); ok {
		return returnFunc(context1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []repository.Catalog); ok {
		r0 = returnFunc(context1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.Catalog)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(context1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetCatalogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCatalogs'
type MockRepository_GetCatalogs_Call struct {
	*mock.Call
}

// GetCatalogs is a helper method to define mock.On call
//   - context1 context.Context
func (_e *MockRepository_Expecter) GetCatalogs(context1 interface{}) *MockRepository_GetCatalogs_Call {
	return &MockRepository_GetCatalogs_Call{Call: _e.mock.On("GetCatalogs", context1)}
}

func (_c *MockRepository_GetCatalogs_Call) Run(run func(context1 context.Context)) *MockRepository_GetCatalogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepository_GetCatalogs_Call) Return(catalogs []repository.Catalog, err error) *MockRepository_GetCatalogs_Call {
	_c.Call.Return(catalogs, err)
	return _c
}

func (_c *MockRepository_GetCatalogs_Call) RunAndReturn(run func(context1 context.Context) ([]repository.Catalog, error)) *MockRepository_GetCatalogs_Call {
	_c.Call.Return(run)
	return _c
}

// GetDbInstance provides a mock function for the type MockRepository
func (_mock *MockRepository) GetDbInstance() *sql.DB {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDbInstance")
	}

	var r0 *sql.DB
	if returnFunc, ok := ret.Get(0).(func() *sql.DB); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.DB)
		}
	}
	return r0
}

// MockRepository_GetDbInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDbInstance'
type MockRepository_GetDbInstance_Call struct {
	*mock.Call
}

// GetDbInstance is a helper method to define mock.On call
func (_e *MockRepository_Expecter) GetDbInstance() *MockRepository_GetDbInstance_Call {
	return &MockRepository_GetDbInstance_Call{Call: _e.mock.On("GetDbInstance")}
}

func (_c *MockRepository_GetDbInstance_Call) Run(run func()) *MockRepository_GetDbInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRepository_GetDbInstance_Call) Return(dB *sql.DB) *MockRepository_GetDbInstance_Call {
	_c.Call.Return(dB)
	return _c
}

func (_c *MockRepository_GetDbInstance_Call) RunAndReturn(run func() *sql.DB) *MockRepository_GetDbInstance_Call {
	_c.Call.Return(run)
	return _c
}

// InsertAllwise provides a mock function for the type MockRepository
func (_mock *MockRepository) InsertAllwise(context1 context.Context, insertAllwiseParams repository.InsertAllwiseParams) error {
	ret := _mock.Called(context1, insertAllwiseParams)

	if len(ret) == 0 {
		panic("no return value specified for InsertAllwise")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, repository.InsertAllwiseParams) error); ok {
		r0 = returnFunc(context1, insertAllwiseParams)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_InsertAllwise_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertAllwise'
type MockRepository_InsertAllwise_Call struct {
	*mock.Call
}

// InsertAllwise is a helper method to define mock.On call
//   - context1 context.Context
//   - insertAllwiseParams repository.InsertAllwiseParams
func (_e *MockRepository_Expecter) InsertAllwise(context1 interface{}, insertAllwiseParams interface{}) *MockRepository_InsertAllwise_Call {
	return &MockRepository_InsertAllwise_Call{Call: _e.mock.On("InsertAllwise", context1, insertAllwiseParams)}
}

func (_c *MockRepository_InsertAllwise_Call) Run(run func(context1 context.Context, insertAllwiseParams repository.InsertAllwiseParams)) *MockRepository_InsertAllwise_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 repository.InsertAllwiseParams
		if args[1] != nil {
			arg1 = args[1].(repository.InsertAllwiseParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_InsertAllwise_Call) Return(err error) *MockRepository_InsertAllwise_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_InsertAllwise_Call) RunAndReturn(run func(context1 context.Context, insertAllwiseParams repository.InsertAllwiseParams) error) *MockRepository_InsertAllwise_Call {
	_c.Call.Return(run)
	return _c
}

// InsertCatalog provides a mock function for the type MockRepository
func (_mock *MockRepository) InsertCatalog(context1 context.Context, insertCatalogParams repository.InsertCatalogParams) (repository.Catalog, error) {
	ret := _mock.Called(context1, insertCatalogParams)

	if len(ret) == 0 {
		panic("no return value specified for InsertCatalog")
	}

	var r0 repository.Catalog
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, repository.InsertCatalogParams) (repository.Catalog, error)); ok {
		return returnFunc(context1, insertCatalogParams)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, repository.InsertCatalogParams) repository.Catalog); ok {
		r0 = returnFunc(context1, insertCatalogParams)
	} else {
		r0 = ret.Get(0).(repository.Catalog)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, repository.InsertCatalogParams) error); ok {
		r1 = returnFunc(context1, insertCatalogParams)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_InsertCatalog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertCatalog'
type MockRepository_InsertCatalog_Call struct {
	*mock.Call
}

// InsertCatalog is a helper method to define mock.On call
//   - context1 context.Context
//   - insertCatalogParams repository.InsertCatalogParams
func (_e *MockRepository_Expecter) InsertCatalog(context1 interface{}, insertCatalogParams interface{}) *MockRepository_InsertCatalog_Call {
	return &MockRepository_InsertCatalog_Call{Call: _e.mock.On("InsertCatalog", context1, insertCatalogParams)}
}

func (_c *MockRepository_InsertCatalog_Call) Run(run func(context1 context.Context, insertCatalogParams repository.InsertCatalogParams)) *MockRepository_InsertCatalog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 repository.InsertCatalogParams
		if args[1] != nil {
			arg1 = args[1].(repository.InsertCatalogParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_InsertCatalog_Call) Return(catalog repository.Catalog, err error) *MockRepository_InsertCatalog_Call {
	_c.Call.Return(catalog, err)
	return _c
}

func (_c *MockRepository_InsertCatalog_Call) RunAndReturn(run func(context1 context.Context, insertCatalogParams repository.InsertCatalogParams) (repository.Catalog, error)) *MockRepository_InsertCatalog_Call {
	_c.Call.Return(run)
	return _c
}

// InsertObject provides a mock function for the type MockRepository
func (_mock *MockRepository) InsertObject(context1 context.Context, insertObjectParams repository.InsertObjectParams) (repository.Mastercat, error) {
	ret := _mock.Called(context1, insertObjectParams)

	if len(ret) == 0 {
		panic("no return value specified for InsertObject")
	}

	var r0 repository.Mastercat
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, repository.InsertObjectParams) (repository.Mastercat, error)); ok {
		return returnFunc(context1, insertObjectParams)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, repository.InsertObjectParams) repository.Mastercat); ok {
		r0 = returnFunc(context1, insertObjectParams)
	} else {
		r0 = ret.Get(0).(repository.Mastercat)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, repository.InsertObjectParams) error); ok {
		r1 = returnFunc(context1, insertObjectParams)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_InsertObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertObject'
type MockRepository_InsertObject_Call struct {
	*mock.Call
}

// InsertObject is a helper method to define mock.On call
//   - context1 context.Context
//   - insertObjectParams repository.InsertObjectParams
func (_e *MockRepository_Expecter) InsertObject(context1 interface{}, insertObjectParams interface{}) *MockRepository_InsertObject_Call {
	return &MockRepository_InsertObject_Call{Call: _e.mock.On("InsertObject", context1, insertObjectParams)}
}

func (_c *MockRepository_InsertObject_Call) Run(run func(context1 context.Context, insertObjectParams repository.InsertObjectParams)) *MockRepository_InsertObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 repository.InsertObjectParams
		if args[1] != nil {
			arg1 = args[1].(repository.InsertObjectParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_InsertObject_Call) Return(mastercat repository.Mastercat, err error) *MockRepository_InsertObject_Call {
	_c.Call.Return(mastercat, err)
	return _c
}

func (_c *MockRepository_InsertObject_Call) RunAndReturn(run func(context1 context.Context, insertObjectParams repository.InsertObjectParams) (repository.Mastercat, error)) *MockRepository_InsertObject_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAllObjects provides a mock function for the type MockRepository
func (_mock *MockRepository) RemoveAllObjects(context1 context.Context) error {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAllObjects")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(context1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_RemoveAllObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAllObjects'
type MockRepository_RemoveAllObjects_Call struct {
	*mock.Call
}

// RemoveAllObjects is a helper method to define mock.On call
//   - context1 context.Context
func (_e *MockRepository_Expecter) RemoveAllObjects(context1 interface{}) *MockRepository_RemoveAllObjects_Call {
	return &MockRepository_RemoveAllObjects_Call{Call: _e.mock.On("RemoveAllObjects", context1)}
}

func (_c *MockRepository_RemoveAllObjects_Call) Run(run func(context1 context.Context)) *MockRepository_RemoveAllObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepository_RemoveAllObjects_Call) Return(err error) *MockRepository_RemoveAllObjects_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_RemoveAllObjects_Call) RunAndReturn(run func(context1 context.Context) error) *MockRepository_RemoveAllObjects_Call {
	_c.Call.Return(run)
	return _c
}
