// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package repository

import (
	"context"
	"strings"
)

const findObjects = `-- name: FindObjects :many
SELECT id, ipix, ra, dec, cat
FROM mastercat 
WHERE ipix IN (/*SLICE:ipix*/?)
`

func (q *Queries) FindObjects(ctx context.Context, ipix []int64) ([]Mastercat, error) {
	query := findObjects
	var queryParams []interface{}
	if len(ipix) > 0 {
		for _, v := range ipix {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ipix*/?", strings.Repeat(",?", len(ipix))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ipix*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Mastercat
	for rows.Next() {
		var i Mastercat
		if err := rows.Scan(
			&i.ID,
			&i.Ipix,
			&i.Ra,
			&i.Dec,
			&i.Cat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getObjectsFromCatalog = `-- name: GetObjectsFromCatalog :many
SELECT id, ipix, ra, dec, cat 
FROM mastercat 
WHERE ipix IN (/*SLICE:ipix*/?)
AND cat = ?
`

type GetObjectsFromCatalogParams struct {
	Ipix []int64
	Cat  string
}

func (q *Queries) GetObjectsFromCatalog(ctx context.Context, arg GetObjectsFromCatalogParams) ([]Mastercat, error) {
	query := getObjectsFromCatalog
	var queryParams []interface{}
	if len(arg.Ipix) > 0 {
		for _, v := range arg.Ipix {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ipix*/?", strings.Repeat(",?", len(arg.Ipix))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ipix*/?", "NULL", 1)
	}
	queryParams = append(queryParams, arg.Cat)
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Mastercat
	for rows.Next() {
		var i Mastercat
		if err := rows.Scan(
			&i.ID,
			&i.Ipix,
			&i.Ra,
			&i.Dec,
			&i.Cat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
