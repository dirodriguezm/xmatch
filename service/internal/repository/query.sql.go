// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package repository

import (
	"context"
	"database/sql"
	"strings"
)

const bulkGetAllwise = `-- name: BulkGetAllwise :many
SELECT id, w1mpro, w1sigmpro, w2mpro, w2sigmpro, w3mpro, w3sigmpro, w4mpro, w4sigmpro, j_m_2mass, j_msig_2mass, h_m_2mass, h_msig_2mass, k_m_2mass, k_msig_2mass
FROM allwise
WHERE id IN (/*SLICE:id*/?)
`

func (q *Queries) BulkGetAllwise(ctx context.Context, id []string) ([]Allwise, error) {
	query := bulkGetAllwise
	var queryParams []interface{}
	if len(id) > 0 {
		for _, v := range id {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:id*/?", strings.Repeat(",?", len(id))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:id*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Allwise
	for rows.Next() {
		var i Allwise
		if err := rows.Scan(
			&i.ID,
			&i.W1mpro,
			&i.W1sigmpro,
			&i.W2mpro,
			&i.W2sigmpro,
			&i.W3mpro,
			&i.W3sigmpro,
			&i.W4mpro,
			&i.W4sigmpro,
			&i.JM2mass,
			&i.JMsig2mass,
			&i.HM2mass,
			&i.HMsig2mass,
			&i.KM2mass,
			&i.KMsig2mass,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const bulkGetGaia = `-- name: BulkGetGaia :many
SELECT id, ra, dec
FROM gaia
WHERE id IN (/*SLICE:id*/?)
`

func (q *Queries) BulkGetGaia(ctx context.Context, id []string) ([]Gaia, error) {
	query := bulkGetGaia
	var queryParams []interface{}
	if len(id) > 0 {
		for _, v := range id {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:id*/?", strings.Repeat(",?", len(id))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:id*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Gaia
	for rows.Next() {
		var i Gaia
		if err := rows.Scan(&i.ID, &i.Ra, &i.Dec); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findObjects = `-- name: FindObjects :many
SELECT id, ipix, ra, dec, cat
FROM mastercat 
WHERE ipix IN (/*SLICE:ipix*/?)
`

func (q *Queries) FindObjects(ctx context.Context, ipix []int64) ([]Mastercat, error) {
	query := findObjects
	var queryParams []interface{}
	if len(ipix) > 0 {
		for _, v := range ipix {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ipix*/?", strings.Repeat(",?", len(ipix))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ipix*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Mastercat
	for rows.Next() {
		var i Mastercat
		if err := rows.Scan(
			&i.ID,
			&i.Ipix,
			&i.Ra,
			&i.Dec,
			&i.Cat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllObjects = `-- name: GetAllObjects :many
SELECT id, ipix, ra, dec, cat
FROM mastercat
`

func (q *Queries) GetAllObjects(ctx context.Context) ([]Mastercat, error) {
	rows, err := q.db.QueryContext(ctx, getAllObjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Mastercat
	for rows.Next() {
		var i Mastercat
		if err := rows.Scan(
			&i.ID,
			&i.Ipix,
			&i.Ra,
			&i.Dec,
			&i.Cat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllwise = `-- name: GetAllwise :one
SELECT id, w1mpro, w1sigmpro, w2mpro, w2sigmpro, w3mpro, w3sigmpro, w4mpro, w4sigmpro, j_m_2mass, j_msig_2mass, h_m_2mass, h_msig_2mass, k_m_2mass, k_msig_2mass
FROM allwise
WHERE id = ?
`

func (q *Queries) GetAllwise(ctx context.Context, id string) (Allwise, error) {
	row := q.db.QueryRowContext(ctx, getAllwise, id)
	var i Allwise
	err := row.Scan(
		&i.ID,
		&i.W1mpro,
		&i.W1sigmpro,
		&i.W2mpro,
		&i.W2sigmpro,
		&i.W3mpro,
		&i.W3sigmpro,
		&i.W4mpro,
		&i.W4sigmpro,
		&i.JM2mass,
		&i.JMsig2mass,
		&i.HM2mass,
		&i.HMsig2mass,
		&i.KM2mass,
		&i.KMsig2mass,
	)
	return i, err
}

const getAllwiseFromPixels = `-- name: GetAllwiseFromPixels :many
SELECT allwise.id, allwise.w1mpro, allwise.w1sigmpro, allwise.w2mpro, allwise.w2sigmpro, allwise.w3mpro, allwise.w3sigmpro, allwise.w4mpro, allwise.w4sigmpro, allwise.j_m_2mass, allwise.j_msig_2mass, allwise.h_m_2mass, allwise.h_msig_2mass, allwise.k_m_2mass, allwise.k_msig_2mass, mastercat.ra, mastercat.dec
FROM allwise 
JOIN mastercat ON mastercat.id = allwise.id
WHERE mastercat.ipix IN (/*SLICE:ipix*/?)
`

type GetAllwiseFromPixelsRow struct {
	ID         string          `json:"id" parquet:"name=source_id, type=BYTE_ARRAY"`
	W1mpro     sql.NullFloat64 `json:"w1mpro" parquet:"name=w1mpro, type=DOUBLE"`
	W1sigmpro  sql.NullFloat64 `json:"w1sigmpro" parquet:"name=w1sigmpro, type=DOUBLE"`
	W2mpro     sql.NullFloat64 `json:"w2mpro" parquet:"name=w2mpro, type=DOUBLE"`
	W2sigmpro  sql.NullFloat64 `json:"w2sigmpro" parquet:"name=w2sigmpro, type=DOUBLE"`
	W3mpro     sql.NullFloat64 `json:"w3mpro" parquet:"name=w3mpro, type=DOUBLE"`
	W3sigmpro  sql.NullFloat64 `json:"w3sigmpro" parquet:"name=w3sigmpro, type=DOUBLE"`
	W4mpro     sql.NullFloat64 `json:"w4mpro" parquet:"name=w4mpro, type=DOUBLE"`
	W4sigmpro  sql.NullFloat64 `json:"w4sigmpro" parquet:"name=w4sigmpro, type=DOUBLE"`
	JM2mass    sql.NullFloat64 `json:"j_m_2mass" parquet:"name=j_m_2mass, type=DOUBLE"`
	JMsig2mass sql.NullFloat64 `json:"j_msig_2mass" parquet:"name=j_msig_2mass, type=DOUBLE"`
	HM2mass    sql.NullFloat64 `json:"h_m_2mass" parquet:"name=h_m_2mass, type=DOUBLE"`
	HMsig2mass sql.NullFloat64 `json:"h_msig_2mass" parquet:"name=h_msig_2mass, type=DOUBLE"`
	KM2mass    sql.NullFloat64 `json:"k_m_2mass" parquet:"name=k_m_2mass, type=DOUBLE"`
	KMsig2mass sql.NullFloat64 `json:"k_msig_2mass" parquet:"name=k_msig_2mass, type=DOUBLE"`
	Ra         float64         `json:"ra" parquet:"name=ra, type=DOUBLE"`
	Dec        float64         `json:"dec" parquet:"name=dec, type=DOUBLE"`
}

func (q *Queries) GetAllwiseFromPixels(ctx context.Context, ipix []int64) ([]GetAllwiseFromPixelsRow, error) {
	query := getAllwiseFromPixels
	var queryParams []interface{}
	if len(ipix) > 0 {
		for _, v := range ipix {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ipix*/?", strings.Repeat(",?", len(ipix))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ipix*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllwiseFromPixelsRow
	for rows.Next() {
		var i GetAllwiseFromPixelsRow
		if err := rows.Scan(
			&i.ID,
			&i.W1mpro,
			&i.W1sigmpro,
			&i.W2mpro,
			&i.W2sigmpro,
			&i.W3mpro,
			&i.W3sigmpro,
			&i.W4mpro,
			&i.W4sigmpro,
			&i.JM2mass,
			&i.JMsig2mass,
			&i.HM2mass,
			&i.HMsig2mass,
			&i.KM2mass,
			&i.KMsig2mass,
			&i.Ra,
			&i.Dec,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCatalogs = `-- name: GetCatalogs :many
SELECT name, nside
FROM catalogs
`

func (q *Queries) GetCatalogs(ctx context.Context) ([]Catalog, error) {
	rows, err := q.db.QueryContext(ctx, getCatalogs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Catalog
	for rows.Next() {
		var i Catalog
		if err := rows.Scan(&i.Name, &i.Nside); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGaia = `-- name: GetGaia :one
SELECT id, ra, dec
FROM gaia
WHERE id = ?
`

func (q *Queries) GetGaia(ctx context.Context, id string) (Gaia, error) {
	row := q.db.QueryRowContext(ctx, getGaia, id)
	var i Gaia
	err := row.Scan(&i.ID, &i.Ra, &i.Dec)
	return i, err
}

const getGaiaFromPixels = `-- name: GetGaiaFromPixels :many
SELECT gaia.id, gaia.ra, gaia.dec, mastercat.ra, mastercat.dec
FROM gaia 
JOIN mastercat ON mastercat.id = gaia.id
WHERE mastercat.ipix IN (/*SLICE:ipix*/?)
`

type GetGaiaFromPixelsRow struct {
	ID    string          `json:"id" parquet:"name=id, type=BYTE_ARRAY"`
	Ra    sql.NullFloat64 `json:"ra" parquet:"name=ra, type=DOUBLE"`
	Dec   sql.NullFloat64 `json:"dec" parquet:"name=dec, type=DOUBLE"`
	Ra_2  float64         `json:"ra" parquet:"name=ra, type=DOUBLE"`
	Dec_2 float64         `json:"dec" parquet:"name=dec, type=DOUBLE"`
}

func (q *Queries) GetGaiaFromPixels(ctx context.Context, ipix []int64) ([]GetGaiaFromPixelsRow, error) {
	query := getGaiaFromPixels
	var queryParams []interface{}
	if len(ipix) > 0 {
		for _, v := range ipix {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ipix*/?", strings.Repeat(",?", len(ipix))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ipix*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGaiaFromPixelsRow
	for rows.Next() {
		var i GetGaiaFromPixelsRow
		if err := rows.Scan(
			&i.ID,
			&i.Ra,
			&i.Dec,
			&i.Ra_2,
			&i.Dec_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getObjectsFromCatalog = `-- name: GetObjectsFromCatalog :many
SELECT id, ipix, ra, dec, cat 
FROM mastercat 
WHERE ipix IN (/*SLICE:ipix*/?)
AND cat = ?
`

type GetObjectsFromCatalogParams struct {
	Ipix []int64 `json:"ipix" parquet:"name=ipix, type=INT64"`
	Cat  string  `json:"cat" parquet:"name=cat, type=BYTE_ARRAY"`
}

func (q *Queries) GetObjectsFromCatalog(ctx context.Context, arg GetObjectsFromCatalogParams) ([]Mastercat, error) {
	query := getObjectsFromCatalog
	var queryParams []interface{}
	if len(arg.Ipix) > 0 {
		for _, v := range arg.Ipix {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ipix*/?", strings.Repeat(",?", len(arg.Ipix))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ipix*/?", "NULL", 1)
	}
	queryParams = append(queryParams, arg.Cat)
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Mastercat
	for rows.Next() {
		var i Mastercat
		if err := rows.Scan(
			&i.ID,
			&i.Ipix,
			&i.Ra,
			&i.Dec,
			&i.Cat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertAllwise = `-- name: InsertAllwise :exec
INSERT INTO allwise (
	id, w1mpro, w1sigmpro, w2mpro, w2sigmpro, w3mpro, w3sigmpro, w4mpro, w4sigmpro, J_m_2mass, J_msig_2mass, H_m_2mass, H_msig_2mass, K_m_2mass, K_msig_2mass
) VALUES (
	?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type InsertAllwiseParams struct {
	ID         string          `json:"id" parquet:"name=source_id, type=BYTE_ARRAY"`
	W1mpro     sql.NullFloat64 `json:"w1mpro" parquet:"name=w1mpro, type=DOUBLE"`
	W1sigmpro  sql.NullFloat64 `json:"w1sigmpro" parquet:"name=w1sigmpro, type=DOUBLE"`
	W2mpro     sql.NullFloat64 `json:"w2mpro" parquet:"name=w2mpro, type=DOUBLE"`
	W2sigmpro  sql.NullFloat64 `json:"w2sigmpro" parquet:"name=w2sigmpro, type=DOUBLE"`
	W3mpro     sql.NullFloat64 `json:"w3mpro" parquet:"name=w3mpro, type=DOUBLE"`
	W3sigmpro  sql.NullFloat64 `json:"w3sigmpro" parquet:"name=w3sigmpro, type=DOUBLE"`
	W4mpro     sql.NullFloat64 `json:"w4mpro" parquet:"name=w4mpro, type=DOUBLE"`
	W4sigmpro  sql.NullFloat64 `json:"w4sigmpro" parquet:"name=w4sigmpro, type=DOUBLE"`
	JM2mass    sql.NullFloat64 `json:"j_m_2mass" parquet:"name=j_m_2mass, type=DOUBLE"`
	JMsig2mass sql.NullFloat64 `json:"j_msig_2mass" parquet:"name=j_msig_2mass, type=DOUBLE"`
	HM2mass    sql.NullFloat64 `json:"h_m_2mass" parquet:"name=h_m_2mass, type=DOUBLE"`
	HMsig2mass sql.NullFloat64 `json:"h_msig_2mass" parquet:"name=h_msig_2mass, type=DOUBLE"`
	KM2mass    sql.NullFloat64 `json:"k_m_2mass" parquet:"name=k_m_2mass, type=DOUBLE"`
	KMsig2mass sql.NullFloat64 `json:"k_msig_2mass" parquet:"name=k_msig_2mass, type=DOUBLE"`
}

func (q *Queries) InsertAllwise(ctx context.Context, arg InsertAllwiseParams) error {
	_, err := q.db.ExecContext(ctx, insertAllwise,
		arg.ID,
		arg.W1mpro,
		arg.W1sigmpro,
		arg.W2mpro,
		arg.W2sigmpro,
		arg.W3mpro,
		arg.W3sigmpro,
		arg.W4mpro,
		arg.W4sigmpro,
		arg.JM2mass,
		arg.JMsig2mass,
		arg.HM2mass,
		arg.HMsig2mass,
		arg.KM2mass,
		arg.KMsig2mass,
	)
	return err
}

const insertCatalog = `-- name: InsertCatalog :exec
INSERT INTO catalogs (
	name, nside
) VALUES (
	?, ?
)
`

type InsertCatalogParams struct {
	Name  string
	Nside int64
}

func (q *Queries) InsertCatalog(ctx context.Context, arg InsertCatalogParams) error {
	_, err := q.db.ExecContext(ctx, insertCatalog, arg.Name, arg.Nside)
	return err
}

const insertGaia = `-- name: InsertGaia :exec
INSERT INTO gaia (
	id, ra, dec
) VALUES (
	?, ?, ?
)
`

type InsertGaiaParams struct {
	ID  string          `json:"id" parquet:"name=id, type=BYTE_ARRAY"`
	Ra  sql.NullFloat64 `json:"ra" parquet:"name=ra, type=DOUBLE"`
	Dec sql.NullFloat64 `json:"dec" parquet:"name=dec, type=DOUBLE"`
}

func (q *Queries) InsertGaia(ctx context.Context, arg InsertGaiaParams) error {
	_, err := q.db.ExecContext(ctx, insertGaia, arg.ID, arg.Ra, arg.Dec)
	return err
}

const insertObject = `-- name: InsertObject :exec
INSERT INTO mastercat (
	id, ipix, ra, dec, cat
) VALUES (
	?, ?, ?, ?, ?
)
`

type InsertObjectParams struct {
	ID   string  `json:"id" parquet:"name=id, type=BYTE_ARRAY"`
	Ipix int64   `json:"ipix" parquet:"name=ipix, type=INT64"`
	Ra   float64 `json:"ra" parquet:"name=ra, type=DOUBLE"`
	Dec  float64 `json:"dec" parquet:"name=dec, type=DOUBLE"`
	Cat  string  `json:"cat" parquet:"name=cat, type=BYTE_ARRAY"`
}

func (q *Queries) InsertObject(ctx context.Context, arg InsertObjectParams) error {
	_, err := q.db.ExecContext(ctx, insertObject,
		arg.ID,
		arg.Ipix,
		arg.Ra,
		arg.Dec,
		arg.Cat,
	)
	return err
}

const removeAllAllwise = `-- name: RemoveAllAllwise :exec
DELETE FROM allwise
`

func (q *Queries) RemoveAllAllwise(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, removeAllAllwise)
	return err
}

const removeAllCatalogs = `-- name: RemoveAllCatalogs :exec
DELETE FROM catalogs
`

func (q *Queries) RemoveAllCatalogs(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, removeAllCatalogs)
	return err
}

const removeAllGaia = `-- name: RemoveAllGaia :exec
DELETE FROM gaia
`

func (q *Queries) RemoveAllGaia(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, removeAllGaia)
	return err
}

const removeAllObjects = `-- name: RemoveAllObjects :exec
DELETE FROM mastercat
`

func (q *Queries) RemoveAllObjects(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, removeAllObjects)
	return err
}
