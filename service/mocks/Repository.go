// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	repository "github.com/dirodriguezm/xmatch/service/internal/repository"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// FindObjects provides a mock function with given fields: _a0, _a1
func (_m *Repository) FindObjects(_a0 context.Context, _a1 []int64) ([]repository.Mastercat, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FindObjects")
	}

	var r0 []repository.Mastercat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64) ([]repository.Mastercat, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []int64) []repository.Mastercat); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.Mastercat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []int64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_FindObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindObjects'
type Repository_FindObjects_Call struct {
	*mock.Call
}

// FindObjects is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 []int64
func (_e *Repository_Expecter) FindObjects(_a0 interface{}, _a1 interface{}) *Repository_FindObjects_Call {
	return &Repository_FindObjects_Call{Call: _e.mock.On("FindObjects", _a0, _a1)}
}

func (_c *Repository_FindObjects_Call) Run(run func(_a0 context.Context, _a1 []int64)) *Repository_FindObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]int64))
	})
	return _c
}

func (_c *Repository_FindObjects_Call) Return(_a0 []repository.Mastercat, _a1 error) *Repository_FindObjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_FindObjects_Call) RunAndReturn(run func(context.Context, []int64) ([]repository.Mastercat, error)) *Repository_FindObjects_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllObjects provides a mock function with given fields: _a0
func (_m *Repository) GetAllObjects(_a0 context.Context) ([]repository.Mastercat, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetAllObjects")
	}

	var r0 []repository.Mastercat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]repository.Mastercat, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []repository.Mastercat); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.Mastercat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetAllObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllObjects'
type Repository_GetAllObjects_Call struct {
	*mock.Call
}

// GetAllObjects is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Repository_Expecter) GetAllObjects(_a0 interface{}) *Repository_GetAllObjects_Call {
	return &Repository_GetAllObjects_Call{Call: _e.mock.On("GetAllObjects", _a0)}
}

func (_c *Repository_GetAllObjects_Call) Run(run func(_a0 context.Context)) *Repository_GetAllObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Repository_GetAllObjects_Call) Return(_a0 []repository.Mastercat, _a1 error) *Repository_GetAllObjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetAllObjects_Call) RunAndReturn(run func(context.Context) ([]repository.Mastercat, error)) *Repository_GetAllObjects_Call {
	_c.Call.Return(run)
	return _c
}

// GetCatalogs provides a mock function with given fields: _a0
func (_m *Repository) GetCatalogs(_a0 context.Context) ([]repository.Catalog, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetCatalogs")
	}

	var r0 []repository.Catalog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]repository.Catalog, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []repository.Catalog); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.Catalog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetCatalogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCatalogs'
type Repository_GetCatalogs_Call struct {
	*mock.Call
}

// GetCatalogs is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Repository_Expecter) GetCatalogs(_a0 interface{}) *Repository_GetCatalogs_Call {
	return &Repository_GetCatalogs_Call{Call: _e.mock.On("GetCatalogs", _a0)}
}

func (_c *Repository_GetCatalogs_Call) Run(run func(_a0 context.Context)) *Repository_GetCatalogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Repository_GetCatalogs_Call) Return(_a0 []repository.Catalog, _a1 error) *Repository_GetCatalogs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetCatalogs_Call) RunAndReturn(run func(context.Context) ([]repository.Catalog, error)) *Repository_GetCatalogs_Call {
	_c.Call.Return(run)
	return _c
}

// InsertCatalog provides a mock function with given fields: _a0, _a1
func (_m *Repository) InsertCatalog(_a0 context.Context, _a1 repository.InsertCatalogParams) (repository.Catalog, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for InsertCatalog")
	}

	var r0 repository.Catalog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.InsertCatalogParams) (repository.Catalog, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.InsertCatalogParams) repository.Catalog); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(repository.Catalog)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.InsertCatalogParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_InsertCatalog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertCatalog'
type Repository_InsertCatalog_Call struct {
	*mock.Call
}

// InsertCatalog is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 repository.InsertCatalogParams
func (_e *Repository_Expecter) InsertCatalog(_a0 interface{}, _a1 interface{}) *Repository_InsertCatalog_Call {
	return &Repository_InsertCatalog_Call{Call: _e.mock.On("InsertCatalog", _a0, _a1)}
}

func (_c *Repository_InsertCatalog_Call) Run(run func(_a0 context.Context, _a1 repository.InsertCatalogParams)) *Repository_InsertCatalog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.InsertCatalogParams))
	})
	return _c
}

func (_c *Repository_InsertCatalog_Call) Return(_a0 repository.Catalog, _a1 error) *Repository_InsertCatalog_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_InsertCatalog_Call) RunAndReturn(run func(context.Context, repository.InsertCatalogParams) (repository.Catalog, error)) *Repository_InsertCatalog_Call {
	_c.Call.Return(run)
	return _c
}

// InsertObject provides a mock function with given fields: _a0, _a1
func (_m *Repository) InsertObject(_a0 context.Context, _a1 repository.InsertObjectParams) (repository.Mastercat, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for InsertObject")
	}

	var r0 repository.Mastercat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.InsertObjectParams) (repository.Mastercat, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.InsertObjectParams) repository.Mastercat); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(repository.Mastercat)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.InsertObjectParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_InsertObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertObject'
type Repository_InsertObject_Call struct {
	*mock.Call
}

// InsertObject is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 repository.InsertObjectParams
func (_e *Repository_Expecter) InsertObject(_a0 interface{}, _a1 interface{}) *Repository_InsertObject_Call {
	return &Repository_InsertObject_Call{Call: _e.mock.On("InsertObject", _a0, _a1)}
}

func (_c *Repository_InsertObject_Call) Run(run func(_a0 context.Context, _a1 repository.InsertObjectParams)) *Repository_InsertObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.InsertObjectParams))
	})
	return _c
}

func (_c *Repository_InsertObject_Call) Return(_a0 repository.Mastercat, _a1 error) *Repository_InsertObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_InsertObject_Call) RunAndReturn(run func(context.Context, repository.InsertObjectParams) (repository.Mastercat, error)) *Repository_InsertObject_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
